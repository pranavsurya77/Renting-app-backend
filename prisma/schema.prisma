generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  AGENT
}

enum PropertyType {
  HOUSE
  APARTMENT
  CONDO
  TOWNHOUSE
  LAND
}

model User {
  id               Int        @id @default(autoincrement())
  name             String
  email            String     @unique
  password         String
  phone            String     @unique
  role             UserRole   @default(USER)
  sentMessages     Message[]  @relation("SentMessages")
  receivedMessages Message[]  @relation("ReceivedMessages")
  properties       Property[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  Token            Token[]
}

model Property {
  id          Int             @id @default(autoincrement())
  title       String
  description String
  type        PropertyType    @default(LAND)
  price       String
  location    String
  ownerId     Int
  messages    Message[]
  images      PropertyImage[]
  owner       User            @relation(fields: [ownerId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model PropertyImage {
  id         Int      @id @default(autoincrement())
  url        String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id])
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  propertyId Int
  senderId   Int
  receiverId Int
  time       DateTime @default(now())

  property Property @relation(fields: [propertyId], references: [id])
  sender   User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model Token {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?
}
